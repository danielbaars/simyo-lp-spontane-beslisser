// FUNCTIONS

@function clamp($value, $min, $max) {
  @return if($value > $max, $max, if($value < $min, $min, $value));
}


// GENERAL

@mixin font-awesome {
  display: inline-block;
  font-family: FontAwesome;
  font-style: normal;
  font-weight: normal;
  line-height: 1;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; 
}

@mixin reset-absolute-positioning {
	position: relative;
	top: auto;
	bottom: auto;
	left: auto;
	right: auto;
}

@mixin icon($size) { 
	width: $size;
	height: $size;
	display: inline-block; 
	background-color: salmon;
	vertical-align: middle;
	transform: translateY(-.1em);
}

@mixin remove-list-styling {
	margin: 0;
	padding: 0;
	list-style: none;
	li {
		list-style: none;
	}
}

@mixin horizontal-list($padding: 10px) {
	padding-left: 0;
	list-style: none;
	> li {
		display: inline-block;
		padding-right: $padding;
		&:last-child {
			padding-right: 0;
		}
	}	
}

@mixin bg-size ($new-width, $width, $height) {
	background-size: $new-width floor(($new-width * ($height/$width)));
}

@mixin bg-size-by-height ($new-height, $width, $height) {
	background-size: floor(($width * ($new-height/$height))) $new-height;
}

@mixin logo-size-by-height ($new-height, $width, $height) {
	background-size: floor(($width * ($new-height/$height))) $new-height;
	width: floor(($width * ($new-height/$height)));
	height: $new-height;
}

@mixin logo-size-by-width ($new-width, $width, $height) {
	background-size: $new-width floor(($height * ($new-width/$width)));
	width: $new-width;
	height: floor(($height * ($new-width/$width)));
}

@mixin padding-lr ($padding) {
	padding-left: $padding;
	padding-right: $padding;
}

@mixin padding-tb ($padding) {
	padding-top: $padding;
	padding-bottom: $padding;
}

@mixin padding-based-on-left ($padding: $padding-base, $right: 0px, $top: 0px, $bottom: 0px) {
	padding-left: $padding;
	padding-right: $padding + $right;
	padding-top: $padding + $top;
	padding-bottom: $padding + $bottom;
}

@mixin vertical-padding ($padding: $padding-base, $multiplier: 1) {
	padding-top: $padding;
	padding-bottom: floor($padding * $multiplier);
}

@mixin horizontal-padding ($padding: $padding-base) {
	padding-left: $padding;
	padding-right: $padding;
}

@mixin container($new-height, $height, $width) {
	width: floor($new-height * ($height/$width));
	height: $new-height;
	img {
		width: 100%;
	}	
}

@mixin row-padding {
	margin-bottom: 18px;
	@media #{$tablet} {
		margin-bottom: 24px;
	}
	@media #{$desktop} {
		margin-bottom: 30px;
	}	
}

@mixin fa-list($icon-code, $size: 0.8, $color: inherit) {
	margin: 0;
	padding: 0;
	li {
		list-style-type: none;
		position: relative;
		padding-left: 22px * $size;
		padding-bottom: 4px;
		&:before {
			font-family: FontAwesome;
			content: $icon-code;
			font-style: normal;
			font-weight: normal;
			line-height: 1;
			display: inline-block;
			vertical-align: middle;
			font-size: $size * 1em;
			position: absolute;
			left: -1px * $size;
			top: 5px / $size;
			color: $color;
		}
	}	
}

@mixin block-center {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

@mixin block-center-reset {
	max-width: none;
	margin-left: 0;
	margin-right: 0;
}

// RESPONSIVE MAPS MIXINS

@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      @include make-font-size($fs-font-size);
    }
    @else {
      // If $fs-font-size is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        @include make-font-size($fs-font-size);
      }
    }
  }
}

// Utility function for mixin font-size
@mixin make-font-size($fs-font-size) {
  // If $fs-font-size is a list, include
  // both font-size and line-height
  @if type-of($fs-font-size) == "list" {
    font-size: nth($fs-font-size, 1);
    @if (length($fs-font-size) > 1) {
      line-height: nth($fs-font-size, 2);
    }
  }
  @else {
    font-size: $fs-font-size;
  }
}


// SIMYO

@mixin simyo-button($color: $simyo-turquoise) {
	position: relative;
	display: inline-block;
	margin: 0;	
	padding: 8px 32px;
	background-color: $color;
	border-bottom-width: 2px;
	border-bottom-style: solid;
	@if $color == $simyo-orange {
		border-bottom-color: #900;
	}
	@else {
		border-bottom-color: $blue-dark-cerulean;
	}
	color: white;
	font-family: $simyo-font-medium;
	font-size: 22px;
	line-height: 1;
	cursor: pointer;
	border-radius: 9px;
	background-clip: padding-box;
	&:hover {
		background-color: tint($color, 30%);
		color: white;
		text-decoration: none;
	}
}


